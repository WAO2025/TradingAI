// pages/api/chat.ts
import type { NextApiRequest, NextApiResponse } from "next";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") {
    return res.status(405).json({ message: "Method not allowed" });
  }

  const { message, history = [] } = req.body;

  console.log("üì® –ó–∞–ø—Ä–æ—Å –≤ —á–∞—Ç:", { message, history });

  if (!message || typeof message !== "string") {
    return res.status(400).json({ message: "Missing or invalid message" });
  }

  if (!process.env.OPENAI_API_KEY) {
    console.error("‚ùå –ù–µ—Ç –∫–ª—é—á–∞ OPENAI_API_KEY");
    return res.status(500).json({ message: "Missing OpenAI API key" });
  }

  try {
    console.log("üîê –ö–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...");

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [...history, { role: "user", content: message }],
        temperature: 0.7,
      }),
    });

    const data = await response.json();
    console.log("üì¨ –û—Ç–≤–µ—Ç –æ—Ç OpenAI:", data);

    if (data.error) {
      console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç OpenAI:", data.error);
      return res.status(500).json({ message: data.error.message });
    }

    const reply = data?.choices?.[0]?.message?.content;
    if (!reply) {
      console.error("‚ö†Ô∏è OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª reply");
      return res.status(500).json({ message: "OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç." });
    }

    res.status(200).json({ reply });

  } catch (error) {
    console.error("üí• –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
  }
}
